import React, { useState } from 'react';
import Switch from './TableSwitcher';

interface StoragePath {
    component: string;
    mount: string;
    name: string;
}

const storagePaths: StoragePath[] = [
    { component: 'Услуги', mount: 'Фото процедуры', name: 'Возможность добавлять/изменять/удалять фото к процедуре' },
    { component: 'Услуги', mount: 'Дополнительная категория услуг', name: 'Возможность добавлять несколько категорий услуг и несколько специализаций' },
    { component: 'Онлайн бронирование', mount: 'Разрешение записывать клиентов', name: 'Возможность разрешать или запрещать клиентам записываться' },
    { component: 'Онлайн бронирование', mount: 'Длительность записи на период', name: 'Возможность устанавливать периоды длительности записи' },
    { component: 'Онлайн бронирование', mount: 'Перерыв между сеансами для всех процедур', name: 'Возможность устанавливать одинаковые перерывы между сеансами' },
    { component: 'Онлайн бронирование', mount: 'Перерыв между сеансами для каждой процедуры', name: 'Возможность устанавливать разные перерывы между сеансами ' },
    { component: 'Онлайн бронирование', mount: 'Подтверждение записи для всех клиентов', name: 'Возможность подтверждать записи для всех клиентов' },
    { component: 'Онлайн бронирование', mount: 'Подтверждение записи для новых клиентов', name: 'Возможность подтверждать записи для новых клиентов' },
    { component: 'Онлайн бронирование', mount: 'Не подтверждать записи', name: 'Возможность не подтверждать записи' },
    { component: 'Онлайн бронирование', mount: 'Запрос окошка для всех клиентов', name: 'Возможность записи в зал ожидания для всех клиентов' },
    { component: 'Онлайн бронирование', mount: 'Запрос окошка для постоянных клиентов', name: 'Возможность записи в зал ожидания для постоянных клиентов' },
    { component: 'Онлайн бронирование', mount: 'Время для VIP клиентов', name: 'Возможность планировать время для ВИП клиентов' },
    { component: 'Онлайн бронирование', mount: 'Настройка приёма онлайн оплаты', name: 'Возможность подключить онлайн оплату или отключить' },
    { component: 'Онлайн бронирование', mount: 'Настройка предоплаты процент', name: 'Возможность настраивать предоплату в процентах' },
    { component: 'Уведомления', mount: 'Напоминать о записи', name: 'Возможность настраивать шаблоны и напоминать клиенту о записи' },
    { component: 'Уведомления', mount: 'Отмена записи', name: 'Возможность настраивать шаблоны и напоминать клиенту об отмене записи' },
    { component: 'Уведомления', mount: 'Изменение записи', name: 'Возможность настраивать шаблоны и напоминать клиенту об изменении записи' },
    { component: 'Уведомления', mount: 'Поздравление с днём рождения', name: 'Возможность настраивать шаблон поздравления и отправлять клиентам' },
    { component: 'Уведомления', mount: 'Перестали посещать', name: 'Возможность напоминать клиентам которые перестали посещать' },
    { component: 'Уведомления', mount: 'Зал ожидания', name: 'Возможность настраивать шаблон для приглашения в зал ожидания' },
    { component: 'Клиенты', mount: 'Клиенты из адресной книги', name: 'Возможность добавлять клиентов из телефона' },
    { component: 'Клиенты', mount: 'Статус новый клиент', name: 'Возможность определять клиента что он новый' },
    { component: 'Клиенты', mount: 'Статус постоянный клиент', name: 'Возможность определять клиента что он постоянный' },
    { component: 'Клиенты', mount: 'Статус не посещал клиент', name: 'Возможность определять клиента что он не посещал мастера' },
    { component: 'Клиенты', mount: 'Статус перестал посещать', name: 'Возможность определять клиента что он перестал посещать' },
    { component: 'Способы оплаты', mount: 'Управление картами', name: 'Возможность добавления/удаления банковских карт' },
    { component: 'Веб страница', mount: 'Ссылка на Веб страницу', name: 'Возможность отправлять ссылку клиентам на профиль мастера' },
    { component: 'Финансы', mount: 'Финансы, расходы, топ лист клиентов', name: 'Возможность создавать расходы для расчёта финансов и получать информацию о состоянии финансов' },
    { component: 'Расписание', mount: 'Остановить запись', name: 'Возможность остановить запись на выбранный день/дату' },
    { component: 'Расписание', mount: 'Записать клиента', name: 'Возможность мастеру записывать клиентов' },
    { component: 'Расписание', mount: 'Сделать день выходным', name: 'Возможность мастеру сделать любой день выходным' },
];

const DetailsFirstTab: React.FC = () => {
    const [isSwitchOn, setIsSwitchOn] = useState(false);

    const toggleSwitch = () => {
        setIsSwitchOn(!isSwitchOn);
    };

    return (
        <table className='w-full'>
            <thead>
                <tr className='bg-[#d0eeff] h-10'>
                    <th className='text-start px-4'>Категория функционала</th>
                    <th className='text-start px-4'>Функционал</th>
                    <th className='text-start px-4'>Описание</th>
                    <th className='text-start px-4'>Статус</th>
                </tr>
            </thead>
            <tbody>
                {storagePaths.map((path, index) => (
                    <tr key={index} className='table-row'>
                        <td className='px-4 py-7'>{path.component}</td>
                        <td className='px-4 py-7'>{path.mount}</td>
                        <td className='px-4 py-7'>{path.name}</td>
                        <td className='px-4 py-7'>
                            <Switch isOn={isSwitchOn} handleToggle={toggleSwitch} />
                        </td>
                    </tr>
                ))}
            </tbody>
        </table>
    );
};

export default DetailsFirstTab;
